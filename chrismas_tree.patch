diff --git a/core/engine.py b/core/engine.py
index 8640826..cabcdd4 100644
--- a/core/engine.py
+++ b/core/engine.py
@@ -43,6 +43,7 @@ from utils.status import get_scan_id
 from web.index.models import ScanResultTask, NewEvilFunc
 from web.index.models import get_resultflow_class, check_update_or_new_scanresult
 
+prere=re.compile(r"^(#|\\\*|\/\/)+")
 
 class Running:
     def __init__(self, sid):
@@ -752,7 +753,7 @@ class Core(object):
                - Java:
         :return: boolean
         """
-        match_result = re.findall(r"^(#|\\\*|\/\/)+", self.code_content)
+        match_result = prere.findall(self.code_content)
         # Skip detection only on match
         if self.is_match_only_rule():
             return False
diff --git a/core/plugins/phpunserializechain/dataflowgenerate.py b/core/plugins/phpunserializechain/dataflowgenerate.py
index bb47963..32c464b 100644
--- a/core/plugins/phpunserializechain/dataflowgenerate.py
+++ b/core/plugins/phpunserializechain/dataflowgenerate.py
@@ -24,6 +24,9 @@ from Kunlun_M.const import ext_dict
 
 from phply import phpast as php
 
+from tqdm import tqdm
+
+numre = re.compile(r'&[0-9]+')
 
 class DataflowGenerate:
     """
@@ -115,32 +118,37 @@ class DataflowGenerate:
                 logger.info("[PhpUnSerChain] New Base locate {}".format(base_locate))
 
                 self.base_dataflow_generate(all_nodes, base_locate)
+                logger.debug("[PhpUnSerChain] New Base dataflow generateing {}".format(base_locate))
 
                 base_address_index = self.dataflow_db.objects.all().count()
 
-                for dataflow in self.dataflows:
+                logger.debug("[PhpUnSerChain] New Base dataflow generateing {}".format(base_locate))
+
+                for dataflow in tqdm(self.dataflows):
                     if dataflow:
 
                         source_node = str(dataflow[2])
                         sink_node = str(dataflow[4])
 
-                        if re.search(r'&[0-9]+', source_node, re.I):
-                            address_list = re.findall(r'&[0-9]+', source_node, re.I)
+                        if numre.search(source_node, re.I):
+                            address_list = numre.findall(source_node, re.I)
                             for address in address_list:
                                 source_node = source_node.replace(address, '&{}'.format(int(address[1:]) + base_address_index))
                             # source_node = '&{}'.format(int(source_node[1:])+base_address_index)
 
-                        if re.search(r'&[0-9]+', sink_node, re.I):
-                            address_list = re.findall(r'&[0-9]+', sink_node, re.I)
+                        if numre.search(sink_node, re.I):
+                            address_list = numre.findall(sink_node, re.I)
                             for address in address_list:
                                 sink_node = sink_node.replace(address, '&{}'.format(int(address[1:]) + base_address_index))
 
                         # if str(sink_node).startswith('&'):
                         #     sink_node = '&{}'.format(int(sink_node[1:])+base_address_index)
-
                         df = self.dataflow_db(node_locate=dataflow[0], node_sort=dataflow[1],
                                               source_node=source_node, node_type=dataflow[3], sink_node=sink_node)
                         df.save()
+                logger.debug("[PhpUnSerChain] New dataflow end")
+                import sys
+                sys.stdout.flush()
 
     def get_node_params(self, node, now_locate, now_sort=0):
         result_params = ()
diff --git a/core/plugins/phpunserializechain/main.py b/core/plugins/phpunserializechain/main.py
index 0c3ad53..9dcb82d 100644
--- a/core/plugins/phpunserializechain/main.py
+++ b/core/plugins/phpunserializechain/main.py
@@ -19,6 +19,10 @@ from utils.log import logger, logger_console
 from .dataflowgenerate import DataflowGenerate
 from core.plugins.baseplugin import BasePluginClass
 
+Functionre = re.compile(r'FunctionCall-(\w+)\(([^)]*)\)')
+numre = re.compile(r'&[0-9]+')
+MethodCallre = re.compile(r'MethodCall-(\w+)\(([^)]*)\)')
+Variablere = re.compile(r'->Variable-\$(\w+)')
 
 class PhpUnSerChain(BasePluginClass):
     """
@@ -370,7 +374,7 @@ class PhpUnSerChain(BasePluginClass):
         :param node_name:
         :return:
         """
-        methodcall_matchObj = re.search(r'MethodCall-(\w+)\(([^)]*)\)', node_name, re.M | re.I)
+        methodcall_matchObj = MethodCallre.search(node_name, re.M | re.I)
 
         if methodcall_matchObj:
             method_name = methodcall_matchObj.group(1)
@@ -392,7 +396,7 @@ class PhpUnSerChain(BasePluginClass):
                 return True
 
         # check get
-        get__matchObj = re.search(r'->Variable-\$(\w+)', node_name, re.M | re.I)
+        get__matchObj = Variablere.search(node_name, re.M | re.I)
 
         if get__matchObj:
             param_name = get__matchObj.group(1)
@@ -408,17 +412,20 @@ class PhpUnSerChain(BasePluginClass):
         :param node:
         :return:
         """
-        self.danger_function = {'call_user_func': [0],
-                                'call_user_func_array': [0, 1],
-                                'eval': [0],
-                                'system': [0],
-                                'file_put_contents': [0, 1],
-                                'create_function': [0, 1],
+        self.danger_function = {
+                                # 'call_user_func': [0],
+                                # 'call_user_func_array': [0, 1],
+                                # 'eval': [0],
+                                'readfile': [0],
+                                'strtolower': [0],
+                                # 'system': [0],
+                                # 'file_put_contents': [0, 1],
+                                # 'create_function': [0, 1],
                                 }
 
         self.indirect_danger_function = {
-                                'array_map': [0],
-                                'call_user_func_array': [0],
+                                # 'array_map': [0],
+                                # 'call_user_func_array': [0],
                                 }
 
         if node.node_type == 'FunctionCall' and node.source_node in self.danger_function:
@@ -437,7 +444,7 @@ class PhpUnSerChain(BasePluginClass):
         # 剩下的都直接对sink_node做处理
         else:
             sink_node = node.sink_node
-            matchObj = re.search(r'FunctionCall-(\w+)\(([^)]*)\)', sink_node, re.M | re.I)
+            matchObj = Functionre.search(sink_node, re.M | re.I)
 
             if matchObj:
                 function_name = matchObj.group(1)
@@ -463,8 +470,8 @@ class PhpUnSerChain(BasePluginClass):
         :param node:
         :return:
         """
-        if re.search(r'&[0-9]+', node, re.I):
-            address_list = re.findall(r'&[0-9]+', node, re.I)
+        if numre.search(node, re.I):
+            address_list = numre.findall(node, re.I)
             for address in address_list:
                 address_id = address[1:]
 
@@ -669,8 +676,7 @@ class PhpUnSerChain(BasePluginClass):
         :param parent_method:  父方法
         :return:
         """
-
-        if deepth > 40:
+        if deepth > 100:
             logger.warn("[PhpUnSerChain] Too much deepth. return.")
             return False
 
diff --git a/requirements.txt b/requirements.txt
index 8071b74..ed4e274 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,13 +1,13 @@
 pyjsparser
-colorlog==3.0.1
-phply==1.0.0
-portalocker==1.1.0
-prettytable==0.7.2
-rarfile==2.7
-requests>=2.20.0
-Werkzeug==0.16.0
-esprima==4.0.1
-jsbeautifier==1.10.2
+colorlog>3.0.1
+phply>1.0.0
+portalocker>1.1.0
+prettytable>0.7.2
+rarfile>2.7
+requests>2.20.0
+Werkzeug>0.16.0
+esprima>=4.0.1
+jsbeautifier>1.10.2
 bs4
 django
 mysqlclient
\ No newline at end of file
